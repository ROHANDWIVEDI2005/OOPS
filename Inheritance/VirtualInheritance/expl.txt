The problem without virtual inheritance
1.)You have one class A that defines a member (data or function).
2.)You make two subclasses B and C, each inheriting from A.
3.)Then you make D inherit from both B and C.
    A
   / \
  B   C
   \ /
    D
‑ Because B brings in its own copy of A, and C brings in its own copy of A, D ends up with two separate copies of A’s members.
‑ When you write object.show(), the compiler says:

“Which show() do you mean? The one from A that came through B, or the one from A that came through C?”
That ambiguity causes a compile‑time error.

The virtual‑base solution
class B : virtual public A { … };
class C : virtual public A { … };
you turn A into a virtual base. That tells the compiler:

“No matter how many times A appears along inheritance paths, there should be exactly one shared A inside the final class.”

So now when you build D:

There is only one A subobject, shared by both B and C.

Calling object.show() is unambiguous—there’s only one show().

‑ “virtual” here has nothing to do with virtual functions or runtime polymorphism.
‑ It simply means “share this base class once, instead of duplicating it along every path.”




1.)Single Shared Base

Student and Teacher both inherit virtually from Person.

When you instantiate TA, there is only one Person subobject in memory.

2.)Who Constructs Person?

Always the most-derived class (TA) is responsible for initializing virtual bases.

Any Person(...) you list in Student or Teacher is ignored when building a TA.

3.)Initializer List Rules

In TA(int x) : Student(x), Teacher(x), Person(x), you explicitly invoke Person(int).

If you omit , Person(x), the compiler falls back to Person().

If no Person() exists (because you only declared Person(int)), you get a compile error.

4.)Call Order (for TA obj(10);)

Person(int)  ▶ virtual base, once

Student(int)  ▶ non-virtual base

Teacher(int)  ▶ non-virtual base

TA(int)     ▶ most-derived body

Key Takeaway
Virtual inheritance ensures one shared base object; the most-derived class must explicitly initialize it (or rely on its default constructor), and any attempts by intermediate classes to reinitialize that base are silently skipped.